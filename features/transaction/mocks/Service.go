// // Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

// import (
// 	jwt "github.com/golang-jwt/jwt/v5"
// 	mock "github.com/stretchr/testify/mock"

// 	transaction "tukangku/features/transaction"
// )

// // Service is an autogenerated mock type for the Service type
// type Service struct {
// 	mock.Mock
// }

// // AddTransaction provides a mock function with given fields: token, JobID, JobPrice
// func (_m *Service) AddTransaction(token *jwt.Token, JobID uint, JobPrice uint) (transaction.Transaction, error) {
// 	ret := _m.Called(token, JobID, JobPrice)

// 	var r0 transaction.Transaction
// 	var r1 error
// 	if rf, ok := ret.Get(0).(func(*jwt.Token, uint, uint) (transaction.Transaction, error)); ok {
// 		return rf(token, JobID, JobPrice)
// 	}
// 	if rf, ok := ret.Get(0).(func(*jwt.Token, uint, uint) transaction.Transaction); ok {
// 		r0 = rf(token, JobID, JobPrice)
// 	} else {
// 		r0 = ret.Get(0).(transaction.Transaction)
// 	}

// 	if rf, ok := ret.Get(1).(func(*jwt.Token, uint, uint) error); ok {
// 		r1 = rf(token, JobID, JobPrice)
// 	} else {
// 		r1 = ret.Error(1)
// 	}

// 	return r0, r1
// }

// // CallBack provides a mock function with given fields: noInvoice
// func (_m *Service) CallBack(noInvoice string) (transaction.TransactionList, error) {
// 	ret := _m.Called(noInvoice)

// 	var r0 transaction.TransactionList
// 	var r1 error
// 	if rf, ok := ret.Get(0).(func(string) (transaction.TransactionList, error)); ok {
// 		return rf(noInvoice)
// 	}
// 	if rf, ok := ret.Get(0).(func(string) transaction.TransactionList); ok {
// 		r0 = rf(noInvoice)
// 	} else {
// 		r0 = ret.Get(0).(transaction.TransactionList)
// 	}

// 	if rf, ok := ret.Get(1).(func(string) error); ok {
// 		r1 = rf(noInvoice)
// 	} else {
// 		r1 = ret.Error(1)
// 	}

// 	return r0, r1
// }

// // CheckTransaction provides a mock function with given fields: transactionID
// func (_m *Service) CheckTransaction(transactionID uint) (transaction.Transaction, error) {
// 	ret := _m.Called(transactionID)

// 	var r0 transaction.Transaction
// 	var r1 error
// 	if rf, ok := ret.Get(0).(func(uint) (transaction.Transaction, error)); ok {
// 		return rf(transactionID)
// 	}
// 	if rf, ok := ret.Get(0).(func(uint) transaction.Transaction); ok {
// 		r0 = rf(transactionID)
// 	} else {
// 		r0 = ret.Get(0).(transaction.Transaction)
// 	}

// 	if rf, ok := ret.Get(1).(func(uint) error); ok {
// 		r1 = rf(transactionID)
// 	} else {
// 		r1 = ret.Error(1)
// 	}

// 	return r0, r1
// }

// // NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// // The first argument is typically a *testing.T value.
// func NewService(t interface {
// 	mock.TestingT
// 	Cleanup(func())
// }) *Service {
// 	mock := &Service{}
// 	mock.Mock.Test(t)

// 	t.Cleanup(func() { mock.AssertExpectations(t) })

// 	return mock
// }
